# -*- coding: utf-8 -*-
"""Cryptocurrency_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XWUX5XbsPdOvhcMCx0c1rwPVU1hsCDMM

# Cryptocurrency Data Analysis and correlation between the Bitcoin Price and other factors

###STEP 1: Importing all the necessary libraries
"""

!pip install prophet

import numpy as np 
import pandas as pd
import csv
from datetime import datetime
import seaborn as sns
color = sns.color_palette()
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import sys

# import pandas as pd       
# # from fbprophet import Prophet
# import prophet

import plotly.offline as py           
import plotly.graph_objs as go        
import plotly.express as px

import plotly.io as pio
pio.renderers.default = 'colab'

"""###STEP 2 : Importing the cryptocurrency dataset and analyzing it"""

# from google.colab import files
# uploaded = files.upload()

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Colab_Notebooks Dec_8_22/3rd Big_Data/top_coins.csv')

df

#groupby
df.groupby(['Currency']).count()

# df.info

df.info()

df.describe()

"""###STEP 3: Data Visualization- All top Cruptcurrencies

Table : Visualizing data
"""

from plotly.figure_factory import create_table
table = create_table(df.head(10), colorscale='plasma')
py.iplot(table)

# from plotly.figure_factory import create_table
# table = create_table(df.head(10), colorscale='blues')
# py.iplot(table)

"""###STEP 4 : Analyzing volume & price and comparison between currancies

Box plot : Analyzing volume
"""

px.box(df, x='Currency', y='Volume')

"""Pie Chart : Analyzing volume"""

px.pie(df, values='Volume', names='Currency')

"""Violin Plot: Analyzing Price"""

px.violin(df, x='Currency',  y="Close")

px.box(df, x='Currency',  y="Close", log_y=True)

"""Scatter Plots : Comparing between Currencies"""

px.scatter(df, x='Close', y='Volume', hover_data=['High','Low','Date'], color='Currency', height=400)

#with log function
px.scatter(df, x='Close', y='Volume', hover_data=['High','Low','Date'], color='Currency', height=400, log_x=True, log_y=True)

"""###STEP 5 : Addinng new files which have effect of the Bitcoin price"""

# from google.colab import drive
# drive.mount('/content/drive')

df_bitcoin = pd.read_csv('/content/drive/MyDrive/Colab_Notebooks Dec_8_22/3rd Big_Data/input/bitcoin_price.csv')

# import numpy as np
# import pandas as pd 
# import csv
# from datetime import datetime
# import seaborn as sns
# color = sns.color_palette()
# import matplotlib.pyplot as plt
# import matplotlib.dates as mdates
# import sys

import os
print(os.listdir("/content/drive/MyDrive/Colab_Notebooks Dec_8_22/3rd Big_Data/input"))

#Preprocessing bitcoin_price.csv to get the date in right format

bit_price_df = pd.read_csv('/content/drive/MyDrive/Colab_Notebooks Dec_8_22/3rd Big_Data/input/bitcoin_price.csv')

bit_price_df.head()

for i, row in bit_price_df.iterrows():
    dt = datetime.strptime(row['Date'], '%b %d, %Y')        
    dt = dt.strftime('%Y-%m-%d')
    row['Date'] = dt
    # bit_price_df.set_value(i,'Date',dt) #it is deprecated now. 
    bit_price_df.at[i,'Date']=dt # https://www.edureka.co/community/43222/python-pandas-dataframe-deprecated-removed-future-release
    
bit_price_df.head()

"""###STEP 6 : Understand the Bitcoin price & volume information and how it changes over time"""

import plotly.offline as py           
import plotly.graph_objs as go 
import plotly.express as px

# Bitcoin specific Area graph
px.area(bit_price_df, x="Date", y="Close")

px.line(df_bitcoin, x="Date", y="Volume")

# Bitcoin specific Violin plot
px.violin(df_bitcoin,  y="Volume")

# CandleStick Charts- Financial data visualization
fig = go.Figure(go.Candlestick(
                            x=df_bitcoin["Date"],
                            open=df_bitcoin['Open'],
                            high=df_bitcoin['High'],
                            low=df_bitcoin['Low'],
                            close=df_bitcoin['Close']
                            ))

fig.show()

"""###STEP 7 : Merging Bitcoin dataset with other data that have effetcs on Bitcoing through 'Date' column"""

# Preprocessing bitcoin_dataset.csv to get the date in right format

bitcoin_dataset_df = pd.read_csv('/content/drive/MyDrive/Colab_Notebooks Dec_8_22/3rd Big_Data/input/bitcoin_dataset.csv')

bitcoin_dataset_df.head()

for i, row in bitcoin_dataset_df.iterrows():
    dt = datetime.strptime(row['Date'], '%Y-%m-%d 00:00:00')        
    dt = dt.strftime('%Y-%m-%d')
    row['Date'] = dt
    # bitcoin_dataset_df.set_value(i,'Date',dt)
    bitcoin_dataset_df.at[i,'Date']=dt

bitcoin_dataset_df.head()

# Joining the two dfs on 'Date' column

joined_data = bitcoin_dataset_df.merge(bit_price_df, on='Date')

joined_data.head()

"""###STEP 8 : Evaluate Bitcoin closing prices and finding the correlation between the "Closing Price" and other factors that we get from the other dataset"""

sns.distplot(joined_data['Close'], kde=False, label='closing price') #default bins using Freedman-Diaconis rule.
#sns.distplot(joined_data['Open'], kde=False, label='Open price') #default bins using Freedman-Diaconis rule.
#sns.distplot(joined_data['High'], kde=False, label='High price') #default bins using Freedman-Diaconis rule.
plt.title("Distribution of closing price of Bitcoin")
plt.legend(loc='best')
plt.show()

# import datetime

# fig, ax = plt.subplots(figsize=(12,8))
# x3 = [datetime.datetime.strptime(d,'%Y-%m-%d').date() for d in joined_data.Date]

# #joined_data
# joined_data['moving_avg'] =  joined_data['Close'].rolling(window=30).mean()
# #print(joined_data)


# plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
# plt.gca().xaxis.set_major_locator(mdates.AutoDateLocator())
# plt.plot(x3, joined_data.Close, label='closing price')
# plt.plot(x3, joined_data.moving_avg, color='red', label='moving average(close price)')
# plt.gcf().autofmt_xdate()
# plt.xlabel("Date", fontsize=15)
# plt.ylabel("Bitcoin Price", fontsize=15)
# plt.title("Bitcoin Price overtime", fontsize=20)
# plt.legend(loc='best')
# plt.show()

"""Day of week analysis"""

# joined_data['weekday'] = pd.to_datetime(joined_data['Date']).dt.weekday_name #it is deprecated now. 
joined_data['weekday'] = pd.to_datetime(joined_data['Date']).dt.day_name() #https://www.codegrepper.com/tpc/attributeerror%3A+%27datetimeproperties%27+object+has+no+attribute+%27weekday_name%27
week_data = joined_data.groupby(['weekday'], as_index=False)['Close'].agg({'mean': 'mean'})
day_of_week = pd.DataFrame(data=week_data)


plt.plot(figsize=(12,8))
plt.title('Day of Week Analysis')

my_xticks = np.array(day_of_week.weekday)
plt.xticks(range(len(week_data['mean'])), my_xticks)
plt.plot(range(len(week_data['mean'])), week_data['mean'])

joined_data['year'] = pd.to_datetime(joined_data['Date']).dt.year
joined_data['month'] = pd.to_datetime(joined_data['Date']).dt.month
# joined_data['weekday'] = pd.to_datetime(joined_data['Date']).dt.weekday_name
joined_data['weekday'] = pd.to_datetime(joined_data['Date']).dt.day_name()

#print(joined_data.weekday)

#week_data=joined_data.groupby(['weekday'])['Close'].mean()

mean_df = joined_data.groupby(['year','weekday'], as_index=False)['Close'].agg({'mean': 'mean'})
std_df = joined_data.groupby(['year','weekday'], as_index=False)['Close'].agg({'std': np.std})
min_df = joined_data.groupby(['year','weekday'], as_index=False)['Close'].agg({'min': np.min})
max_df = joined_data.groupby(['year','weekday'], as_index=False)['Close'].agg({'max': np.max})
median_df = joined_data.groupby(['year','weekday'], as_index=False)['Close'].agg({'median': np.median})



week_data = pd.concat([mean_df, std_df['std'], min_df['min'],max_df['max'], median_df['median']], axis=1)
week_data['var_coeff'] = std_df['std'] / mean_df['mean']

week_data.head(10)

years = [2013,2014,2015,2016,2017]


fig, ax = plt.subplots(len(years),4,sharex=True, sharey=False ,figsize=(12,12))
fig.suptitle('Day of Week Analysis')

for i, year in enumerate(years):
    holder = week_data[week_data['year']==year]
    #print(holder)
    
    my_xticks = np.array(day_of_week.weekday)
    plt.xticks(range(len(holder['mean'])), my_xticks, rotation=90)
    
    ax[i][0].plot(range(len(holder['mean'])), holder['mean'])
   # ax[i][0].set_ylim(min(holder['mean']), max(holder['mean']))
    

    ax[i][1].errorbar(
    range(len(holder['mean'])),     # X
    holder['mean'],    # Y
    yerr=holder['std'],        # Y-errors
      # format line like for plot()
    linewidth=3,   # width of plot line
    elinewidth=1,# width of error bar line
    ecolor='r',    # color of error bar
    capsize=4,     # cap length for error bar
    capthick=2,  # cap thickness for error bar
    )
    

    ax[i][2].plot(range(len(holder['mean'])), holder['mean'])
    #ax[i][2].set_ylim(abs(max(holder['mean']) - max(holder['std'])), abs(max(holder['mean']) + max(holder['std'])))
    
    ax[i][3].errorbar(
    range(len(holder['mean'])),     # X
    holder['mean'],    # Y
    yerr=holder['std'],        # Y-errors
      # format line like for plot()
    linewidth=3,   # width of plot line
    elinewidth=1,# width of error bar line
    ecolor='r',    # color of error bar
    capsize=4,     # cap length for error bar
    capthick=2,  # cap thickness for error bar
    )
    
    
    ax[i][2].set_ylim(0, 4500) #these values are set by experimenting with 'sharey' attribute in subplots() function
                               #the goal is to compare the mean for all years relative to bitcoin increased price now
    ax[i][3].set_ylim(0, 4500)

    #ax[i].set_xlabel("Year"+" "+str(year),fontsize=10)
    #ax[i].set_ylabel("Bitcoin Price",fontsize=10)
    ax[i][0].set_title(year)
    ax[i][1].set_title(year)
    ax[i][2].set_title(year)   
    ax[i][3].set_title(year)  

for tick in ax[i][0].get_xticklabels():
    tick.set_rotation(90)
for tick in ax[i][1].get_xticklabels():
    tick.set_rotation(90)
for tick in ax[i][2].get_xticklabels():
    tick.set_rotation(90)


#plt.savefig('yearly_dayofweek.png')
plt.show()

selected_col = joined_data[['Close','btc_market_cap',
                            'btc_avg_block_size',
                            'btc_n_transactions_per_block',
                            'btc_hash_rate',
                            'btc_difficulty',
                            'btc_cost_per_transaction',
                            'btc_n_transactions']]

selected_col.head()
corrmat = selected_col.corr(method='pearson')

columns = ['Close']
my_corrmat = corrmat.copy()
mask = my_corrmat.columns.isin(columns)
my_corrmat.loc[:, ~mask] = 0
#print(my_corrmat)

fig, ax = plt.subplots(figsize=(10, 8))
sns.heatmap(my_corrmat, annot=False, fmt="f", cmap="Blues") #vmax=1., square=True)
plt.title("Correlation Between Price and other factors", fontsize=15)
#plt.savefig('variablecorrelation.png', bbox_inches='tight')
plt.show()

